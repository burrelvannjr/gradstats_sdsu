mutate(vio_crime = murder+rape+robbery+agg_assault) %>%
mutate(lnvio_crime = log(vio_crime +1)) %>%
mutate(prop_crime = burglary+larceny+mvtheft+arson) %>%
mutate(lnprop_crime = log(prop_crime + 1)) %>%
mutate(d_murder = 0) %>%
mutate(d_rape = 0) %>%
mutate(d_robbery = 0) %>%
mutate(d_agg_assault = 0) %>%
mutate(d_burglary = 0) %>%
mutate(d_larceny = 0) %>%
mutate(d_mvtheft = 0) %>%
mutate(d_arson = 0) %>%
mutate(d_murder=replace(d_murder, murder>=1, 1)) %>%
mutate(d_rape=replace(d_rape, rape>=1, 1)) %>%
mutate(d_robbery=replace(d_robbery, robbery>=1, 1)) %>%
mutate(d_agg_assault=replace(d_agg_assault, agg_assault>=1, 1)) %>%
mutate(d_burglary=replace(d_burglary, burglary>=1, 1)) %>%
mutate(d_larceny=replace(d_larceny, larceny>=1, 1)) %>%
mutate(d_mvtheft=replace(d_mvtheft, mvtheft>=1, 1)) %>%
mutate(d_arson=replace(d_arson, arson>=1, 1))
summary(logit_robbery <- glmer(robbery~lnterry_stops+lnpotshops+lncalls_for_service+lnpop_i+pct_black_i+pct_latino_i+pct_vacant_i+popdens_i +
(1 | geoid), control = glmerControl(optimizer = "bobyqa"),
nAGQ = 100, family = binomial("logit"), data = data))
summary(logit_robbery <- glmer(d_robbery~lnterry_stops+lnpotshops+lncalls_for_service+lnpop_i+pct_black_i+pct_latino_i+pct_vacant_i+popdens_i +
(1 | geoid), #control = glmerControl(optimizer = "bobyqa"),
#nAGQ = 100,
family = binomial("logit"), data = data))
data <- mtcars
mean(data$mpg) - 1.96(sd(data$mpg)/sqrt(32))
mean(data$mpg) + 1.96(sd(data$mpg)/sqrt(32))
#ci 95 for mpg
mean(data$mpg) - 1.96*(sd(data$mpg)/sqrt(32))
mean(data$mpg) + 1.96*(sd(data$mpg)/sqrt(32))
mean(data$mpg) - 2.58*(sd(data$mpg)/sqrt(32))
mean(data$mpg) + 2.58*(sd(data$mpg)/sqrt(32))
mean(data$mpg) - 2.58*(sd(data$mpg)/sqrt(length(data)))
length(data)
nrow(data)
m <- mean(data$mpg)
se <- (sd(data$mpg)/sqrt(nrow(data)))
z <- 1.96
ci_95_up <- m + z(se)
ci_95_lo <- m - z(se)
ci_95_up <- m + z*(se)
ci_95_lo <- m - z*(se)
z99 <- 2.58
ci_99_up <- m + z99*(se)
ci_99_lo <- m - z99*(se)
x <- 34.00
mean_mpg <- mean(data$mpg)
sd_mpg <- sd(data$mpg)
((x - mean_mpg)/(sd_mpg))
Z <- ((x - mean_mpg)/(sd_mpg))
Z
x <- 12
mean_mpg <- mean(data$mpg)
sd_mpg <- sd(data$mpg)
Z <- ((x - mean_mpg)/(sd_mpg))
Z
data1 <- mtcars
scatter(data1, mpg, wt)
library(vannstats)
scatter(data1, mpg, wt)
scatter(data1, mpg, wt, T)
min(data1$mpg)
max(data1$mpg)
max(data1$mpg)-min(data1$mpg)
(max(data1$mpg)-min(data1$mpg))*.8
scatter <- function(df, var1, var2, lab = FALSE){
#bygroups <- length(match.call())-3
#if(bygroups==0) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)), "'")
#  laby <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df), main = main, ylab = laby) # a way of calling values within #df$var1
#  #boxplot({{ var1 }}, data = df, main = main)
#}
#if(bygroups==1) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)),"' by '", deparse(substitute(var2)),"'")
#  labx <- deparse(substitute(var2))
#  laby <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df) ~ eval(substitute(var2), df), main = main, xlab = labx, ylab = laby)
#}
#if(bygroups==2) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)),"' by '", deparse(substitute(var2)),"' and '", deparse(substitute(by2)),"'")
#  labx2 <- paste0(deparse(substitute(var2))," by ", deparse(substitute(by2)))
#  laby2 <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df) ~ eval(substitute(var2), df) + eval(substitute(by2), df), main = main, xlab = labx2, ylab = laby2)
#}
main <- paste0("Scatterplot of '", deparse(substitute(var1)),"' and '", deparse(substitute(var2)),"'")
labx <- deparse(substitute(var2))
laby <- deparse(substitute(var1))
#print(ycoord)
#print(xcoord)
model <- cor.test(eval(substitute(var1), df), eval(substitute(var2), df))
r_val <- model$estimate[[1]]
r_val_round <- round(r_val, 4)
r_text <- "\u0072" #"\u0072\U00B2" #U1D493
r_text2 <- paste0(r_text, " = ", r_val_round)
plot(eval(substitute(var2), df), eval(substitute(var1), df), main = main, xlab = labx, ylab = laby)
abline(lm(eval(substitute(var1), df)~eval(substitute(var2), df)), col="Blue")
if(r_val <= 0){
ycoord <- ( max(eval(substitute(var1), df), na.rm = T) )  * .80
xcoord <- ( max(eval(substitute(var2), df), na.rm = T) ) * .80
}
if(r_val > 0){
ycoord <- ( min(eval(substitute(var1), df), na.rm = T) )  * .80
xcoord <- ( max(eval(substitute(var2), df), na.rm = T) ) * .80
}
if(lab == TRUE){
text(xcoord, ycoord, r_text2, cex = 1.35, col = "red")
}
#return(p)
}
scatter(data1, mpg, wt, T)
scatter <- function(df, var1, var2, lab = FALSE){
#bygroups <- length(match.call())-3
#if(bygroups==0) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)), "'")
#  laby <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df), main = main, ylab = laby) # a way of calling values within #df$var1
#  #boxplot({{ var1 }}, data = df, main = main)
#}
#if(bygroups==1) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)),"' by '", deparse(substitute(var2)),"'")
#  labx <- deparse(substitute(var2))
#  laby <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df) ~ eval(substitute(var2), df), main = main, xlab = labx, ylab = laby)
#}
#if(bygroups==2) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)),"' by '", deparse(substitute(var2)),"' and '", deparse(substitute(by2)),"'")
#  labx2 <- paste0(deparse(substitute(var2))," by ", deparse(substitute(by2)))
#  laby2 <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df) ~ eval(substitute(var2), df) + eval(substitute(by2), df), main = main, xlab = labx2, ylab = laby2)
#}
main <- paste0("Scatterplot of '", deparse(substitute(var1)),"' and '", deparse(substitute(var2)),"'")
labx <- deparse(substitute(var2))
laby <- deparse(substitute(var1))
#print(ycoord)
#print(xcoord)
model <- cor.test(eval(substitute(var1), df), eval(substitute(var2), df))
r_val <- model$estimate[[1]]
r_val_round <- round(r_val, 4)
r_text <- "\u0072" #"\u0072\U00B2" #U1D493
r_text2 <- paste0(r_text, " = ", r_val_round)
plot(eval(substitute(var2), df), eval(substitute(var1), df), main = main, xlab = labx, ylab = laby)
abline(lm(eval(substitute(var1), df)~eval(substitute(var2), df)), col="Blue")
if(r_val <= 0){
ycoord <- ( max(eval(substitute(var1), df), na.rm = T) )  * .90
xcoord <- ( max(eval(substitute(var2), df), na.rm = T) ) * .90
}
if(r_val > 0){
ycoord <- ( min(eval(substitute(var1), df), na.rm = T) )  * .90
xcoord <- ( max(eval(substitute(var2), df), na.rm = T) ) * .90
}
if(lab == TRUE){
text(xcoord, ycoord, r_text2, cex = 1.25, col = "red")
}
#return(p)
}
scatter(data1, mpg, wt, T)
View(data1)
scatter(data1, mpg, cyl, T)
data2 <- survey
library(MASS)
data2 <- survey
View(data2)
scatter(data2, Wr.Hnd, Height, T)
scatter(data2, Wr.Hnd, Height)
scatter(data2, Wr.Hnd, Height, T)
scatter(data2, Wr.Hnd, Height, lab = T)
max(data2$Wr.Hnd)
max(data2$Wr.Hnd, na.rm = T)
scatter <- function(df, var1, var2, lab = FALSE){
#bygroups <- length(match.call())-3
#if(bygroups==0) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)), "'")
#  laby <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df), main = main, ylab = laby) # a way of calling values within #df$var1
#  #boxplot({{ var1 }}, data = df, main = main)
#}
#if(bygroups==1) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)),"' by '", deparse(substitute(var2)),"'")
#  labx <- deparse(substitute(var2))
#  laby <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df) ~ eval(substitute(var2), df), main = main, xlab = labx, ylab = laby)
#}
#if(bygroups==2) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)),"' by '", deparse(substitute(var2)),"' and '", deparse(substitute(by2)),"'")
#  labx2 <- paste0(deparse(substitute(var2))," by ", deparse(substitute(by2)))
#  laby2 <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df) ~ eval(substitute(var2), df) + eval(substitute(by2), df), main = main, xlab = labx2, ylab = laby2)
#}
main <- paste0("Scatterplot of '", deparse(substitute(var1)),"' and '", deparse(substitute(var2)),"'")
labx <- deparse(substitute(var2))
laby <- deparse(substitute(var1))
#print(ycoord)
#print(xcoord)
model <- cor.test(eval(substitute(var1), df), eval(substitute(var2), df))
r_val <- model$estimate[[1]]
r_val_round <- round(r_val, 4)
r_text <- "\u0072" #"\u0072\U00B2" #U1D493
r_text2 <- paste0(r_text, " = ", r_val_round)
plot(eval(substitute(var2), df), eval(substitute(var1), df), main = main, xlab = labx, ylab = laby)
abline(lm(eval(substitute(var1), df)~eval(substitute(var2), df)), col="Blue")
if(r_val <= 0){
ycoord <- ( max(eval(substitute(var1), df), na.rm = T) )  * .90
xcoord <- ( max(eval(substitute(var2), df), na.rm = T) ) * .90
}
if(r_val > 0){
ycoord <- ( min(eval(substitute(var1), df), na.rm = T) )  * 1.10
xcoord <- ( max(eval(substitute(var2), df), na.rm = T) ) * .90
}
if(lab == TRUE){
text(xcoord, ycoord, r_text2, cex = 1.25, col = "red")
}
#return(p)
}
scatter(data2, Wr.Hnd, Height, lab = T)
23.2*.9
23.2-20.88
min(data2$Wr.Hnd, na.rm = T) + 2.32
15.32/min(data2$Wr.Hnd, na.rm = T)
max(data2$Height, na.rm = T)
max(data2$Height, na.rm = T) - min(data2$Height, na.rm = T)
50*.9
150+145
150+45
22-14
*.9
8*.9
14+7.2
8*.8
8*.8 + 14
22-6.4
scatter <- function(df, var1, var2, lab = FALSE){
#bygroups <- length(match.call())-3
#if(bygroups==0) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)), "'")
#  laby <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df), main = main, ylab = laby) # a way of calling values within #df$var1
#  #boxplot({{ var1 }}, data = df, main = main)
#}
#if(bygroups==1) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)),"' by '", deparse(substitute(var2)),"'")
#  labx <- deparse(substitute(var2))
#  laby <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df) ~ eval(substitute(var2), df), main = main, xlab = labx, ylab = laby)
#}
#if(bygroups==2) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)),"' by '", deparse(substitute(var2)),"' and '", deparse(substitute(by2)),"'")
#  labx2 <- paste0(deparse(substitute(var2))," by ", deparse(substitute(by2)))
#  laby2 <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df) ~ eval(substitute(var2), df) + eval(substitute(by2), df), main = main, xlab = labx2, ylab = laby2)
#}
main <- paste0("Scatterplot of '", deparse(substitute(var1)),"' and '", deparse(substitute(var2)),"'")
labx <- deparse(substitute(var2))
laby <- deparse(substitute(var1))
#print(ycoord)
#print(xcoord)
model <- cor.test(eval(substitute(var1), df), eval(substitute(var2), df))
r_val <- model$estimate[[1]]
r_val_round <- round(r_val, 4)
r_text <- "\u0072" #"\u0072\U00B2" #U1D493
r_text2 <- paste0(r_text, " = ", r_val_round)
plot(eval(substitute(var2), df), eval(substitute(var1), df), main = main, xlab = labx, ylab = laby)
abline(lm(eval(substitute(var1), df)~eval(substitute(var2), df)), col="Blue")
if(r_val <= 0){
ycoord <- ( ( max(eval(substitute(var1), df), na.rm = T) - min(eval(substitute(var1), df), na.rm = T) ) * .90) + min(eval(substitute(var1), df), na.rm = T)
xcoord <- ( ( max(eval(substitute(var2), df), na.rm = T) - min(eval(substitute(var2), df), na.rm = T) ) * .90) + min(eval(substitute(var2), df), na.rm = T)
}
if(r_val > 0){
ycoord <- max(eval(substitute(var1), df), na.rm = T) - ( ( max(eval(substitute(var1), df), na.rm = T) - min(eval(substitute(var1), df), na.rm = T)) * .90)
xcoord <- ( ( max(eval(substitute(var2), df), na.rm = T) - min(eval(substitute(var2), df), na.rm = T)) * .90)
}
if(lab == TRUE){
text(xcoord, ycoord, r_text2, cex = 1.25, col = "red")
}
#return(p)
}
scatter(data2, Wr.Hnd, Height, lab = T)
scatter <- function(df, var1, var2, lab = FALSE){
#bygroups <- length(match.call())-3
#if(bygroups==0) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)), "'")
#  laby <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df), main = main, ylab = laby) # a way of calling values within #df$var1
#  #boxplot({{ var1 }}, data = df, main = main)
#}
#if(bygroups==1) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)),"' by '", deparse(substitute(var2)),"'")
#  labx <- deparse(substitute(var2))
#  laby <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df) ~ eval(substitute(var2), df), main = main, xlab = labx, ylab = laby)
#}
#if(bygroups==2) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)),"' by '", deparse(substitute(var2)),"' and '", deparse(substitute(by2)),"'")
#  labx2 <- paste0(deparse(substitute(var2))," by ", deparse(substitute(by2)))
#  laby2 <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df) ~ eval(substitute(var2), df) + eval(substitute(by2), df), main = main, xlab = labx2, ylab = laby2)
#}
main <- paste0("Scatterplot of '", deparse(substitute(var1)),"' and '", deparse(substitute(var2)),"'")
labx <- deparse(substitute(var2))
laby <- deparse(substitute(var1))
#print(ycoord)
#print(xcoord)
model <- cor.test(eval(substitute(var1), df), eval(substitute(var2), df))
r_val <- model$estimate[[1]]
r_val_round <- round(r_val, 4)
r_text <- "\u0072" #"\u0072\U00B2" #U1D493
r_text2 <- paste0(r_text, " = ", r_val_round)
plot(eval(substitute(var2), df), eval(substitute(var1), df), main = main, xlab = labx, ylab = laby)
abline(lm(eval(substitute(var1), df)~eval(substitute(var2), df)), col="Blue")
if(r_val <= 0){
ycoord <- ( ( max(eval(substitute(var1), df), na.rm = T) - min(eval(substitute(var1), df), na.rm = T) ) * .90) + min(eval(substitute(var1), df), na.rm = T)
xcoord <- ( ( max(eval(substitute(var2), df), na.rm = T) - min(eval(substitute(var2), df), na.rm = T) ) * .90) + min(eval(substitute(var2), df), na.rm = T)
}
if(r_val > 0){
ycoord <- max(eval(substitute(var1), df), na.rm = T) - ( ( max(eval(substitute(var1), df), na.rm = T) - min(eval(substitute(var1), df), na.rm = T)) * .90)
xcoord <- ( ( max(eval(substitute(var2), df), na.rm = T) - min(eval(substitute(var2), df), na.rm = T)) * .90)
}
print(ycoord)
print(xcoord)
if(lab == TRUE){
text(xcoord, ycoord, r_text2, cex = 1.25, col = "red")
}
#return(p)
}
scatter(data2, Wr.Hnd, Height, lab = T)
scatter <- function(df, var1, var2, lab = FALSE){
#bygroups <- length(match.call())-3
#if(bygroups==0) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)), "'")
#  laby <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df), main = main, ylab = laby) # a way of calling values within #df$var1
#  #boxplot({{ var1 }}, data = df, main = main)
#}
#if(bygroups==1) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)),"' by '", deparse(substitute(var2)),"'")
#  labx <- deparse(substitute(var2))
#  laby <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df) ~ eval(substitute(var2), df), main = main, xlab = labx, ylab = laby)
#}
#if(bygroups==2) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)),"' by '", deparse(substitute(var2)),"' and '", deparse(substitute(by2)),"'")
#  labx2 <- paste0(deparse(substitute(var2))," by ", deparse(substitute(by2)))
#  laby2 <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df) ~ eval(substitute(var2), df) + eval(substitute(by2), df), main = main, xlab = labx2, ylab = laby2)
#}
main <- paste0("Scatterplot of '", deparse(substitute(var1)),"' and '", deparse(substitute(var2)),"'")
labx <- deparse(substitute(var2))
laby <- deparse(substitute(var1))
#print(ycoord)
#print(xcoord)
model <- cor.test(eval(substitute(var1), df), eval(substitute(var2), df))
r_val <- model$estimate[[1]]
r_val_round <- round(r_val, 4)
r_text <- "\u0072" #"\u0072\U00B2" #U1D493
r_text2 <- paste0(r_text, " = ", r_val_round)
plot(eval(substitute(var2), df), eval(substitute(var1), df), main = main, xlab = labx, ylab = laby)
abline(lm(eval(substitute(var1), df)~eval(substitute(var2), df)), col="Blue")
if(r_val <= 0){
ycoord <- ( ( max(eval(substitute(var1), df), na.rm = T) - min(eval(substitute(var1), df), na.rm = T) ) * .90) + min(eval(substitute(var1), df), na.rm = T)
xcoord <- ( ( max(eval(substitute(var2), df), na.rm = T) - min(eval(substitute(var2), df), na.rm = T) ) * .90) + min(eval(substitute(var2), df), na.rm = T)
}
if(r_val > 0){
ycoord <- max(eval(substitute(var1), df), na.rm = T) - ( ( max(eval(substitute(var1), df), na.rm = T) - min(eval(substitute(var1), df), na.rm = T) ) * .90)
xcoord <- ( ( max(eval(substitute(var2), df), na.rm = T) - min(eval(substitute(var2), df), na.rm = T) ) * .90) + min(eval(substitute(var2), df), na.rm = T)
}
print(ycoord)
print(xcoord)
if(lab == TRUE){
text(xcoord, ycoord, r_text2, cex = 1.25, col = "red")
}
#return(p)
}
scatter(data2, Wr.Hnd, Height, lab = T)
scatter <- function(df, var1, var2, lab = FALSE){
#bygroups <- length(match.call())-3
#if(bygroups==0) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)), "'")
#  laby <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df), main = main, ylab = laby) # a way of calling values within #df$var1
#  #boxplot({{ var1 }}, data = df, main = main)
#}
#if(bygroups==1) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)),"' by '", deparse(substitute(var2)),"'")
#  labx <- deparse(substitute(var2))
#  laby <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df) ~ eval(substitute(var2), df), main = main, xlab = labx, ylab = laby)
#}
#if(bygroups==2) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)),"' by '", deparse(substitute(var2)),"' and '", deparse(substitute(by2)),"'")
#  labx2 <- paste0(deparse(substitute(var2))," by ", deparse(substitute(by2)))
#  laby2 <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df) ~ eval(substitute(var2), df) + eval(substitute(by2), df), main = main, xlab = labx2, ylab = laby2)
#}
main <- paste0("Scatterplot of '", deparse(substitute(var1)),"' and '", deparse(substitute(var2)),"'")
labx <- deparse(substitute(var2))
laby <- deparse(substitute(var1))
model <- cor.test(eval(substitute(var1), df), eval(substitute(var2), df))
r_val <- model$estimate[[1]]
r_val_round <- round(r_val, 4)
r_text <- "\u0072" #"\u0072\U00B2" #U1D493
r_text2 <- paste0(r_text, " = ", r_val_round)
plot(eval(substitute(var2), df), eval(substitute(var1), df), main = main, xlab = labx, ylab = laby)
abline(lm(eval(substitute(var1), df)~eval(substitute(var2), df)), col="Blue")
if(r_val <= 0){
ycoord <- ( ( max(eval(substitute(var1), df), na.rm = T) - min(eval(substitute(var1), df), na.rm = T) ) * .90) + min(eval(substitute(var1), df), na.rm = T)
xcoord <- ( ( max(eval(substitute(var2), df), na.rm = T) - min(eval(substitute(var2), df), na.rm = T) ) * .90) + min(eval(substitute(var2), df), na.rm = T)
}
if(r_val > 0){
ycoord <- max(eval(substitute(var1), df), na.rm = T) - ( ( max(eval(substitute(var1), df), na.rm = T) - min(eval(substitute(var1), df), na.rm = T) ) * .90)
xcoord <- ( ( max(eval(substitute(var2), df), na.rm = T) - min(eval(substitute(var2), df), na.rm = T) ) * .90) + min(eval(substitute(var2), df), na.rm = T)
}
#print(ycoord)
#print(xcoord)
if(lab == TRUE){
text(xcoord, ycoord, r_text2, cex = 1.25, col = "red")
}
#return(p)
}
scatter(data1, mpg, cyl, T)
scatter(data1, mpg, wt, T)
View(data2)
scatter(data2, Pulse, Height, lab = T)
scatter(data2, Pulse, NW.Hnd, lab = T)
scatter <- function(df, var1, var2, lab = FALSE){
#bygroups <- length(match.call())-3
#if(bygroups==0) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)), "'")
#  laby <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df), main = main, ylab = laby) # a way of calling values within #df$var1
#  #boxplot({{ var1 }}, data = df, main = main)
#}
#if(bygroups==1) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)),"' by '", deparse(substitute(var2)),"'")
#  labx <- deparse(substitute(var2))
#  laby <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df) ~ eval(substitute(var2), df), main = main, xlab = labx, ylab = laby)
#}
#if(bygroups==2) {
#  main <- paste0("Boxplot of '", deparse(substitute(var1)),"' by '", deparse(substitute(var2)),"' and '", deparse(substitute(by2)),"'")
#  labx2 <- paste0(deparse(substitute(var2))," by ", deparse(substitute(by2)))
#  laby2 <- deparse(substitute(var1))
#  boxplot(eval(substitute(var1), df) ~ eval(substitute(var2), df) + eval(substitute(by2), df), main = main, xlab = labx2, ylab = laby2)
#}
main <- paste0("Scatterplot of '", deparse(substitute(var1)),"' and '", deparse(substitute(var2)),"'")
labx <- deparse(substitute(var2))
laby <- deparse(substitute(var1))
model <- cor.test(eval(substitute(var1), df), eval(substitute(var2), df))
r_val <- model$estimate[[1]]
r_val_round <- round(r_val, 4)
r_text <- "\u0072" #"\u0072\U00B2" #U1D493
r_text2 <- paste0(r_text, " = ", r_val_round)
plot(eval(substitute(var2), df), eval(substitute(var1), df), main = main, xlab = labx, ylab = laby)
abline(lm(eval(substitute(var1), df)~eval(substitute(var2), df)), col="Blue")
if(r_val <= 0){
ycoord <- ( ( max(eval(substitute(var1), df), na.rm = T) - min(eval(substitute(var1), df), na.rm = T) ) * .90) + min(eval(substitute(var1), df), na.rm = T)
xcoord <- ( ( max(eval(substitute(var2), df), na.rm = T) - min(eval(substitute(var2), df), na.rm = T) ) * .90) + min(eval(substitute(var2), df), na.rm = T)
}
if(r_val > 0){
ycoord <- max(eval(substitute(var1), df), na.rm = T) - ( ( max(eval(substitute(var1), df), na.rm = T) - min(eval(substitute(var1), df), na.rm = T) ) * .90)
xcoord <- ( ( max(eval(substitute(var2), df), na.rm = T) - min(eval(substitute(var2), df), na.rm = T) ) * .90) + min(eval(substitute(var2), df), na.rm = T)
}
#print(ycoord)
#print(xcoord)
if(lab == TRUE){
text(xcoord, ycoord, r_text2, cex = 1.35, col = "red")
}
#return(p)
}
scatter(data2, Pulse, NW.Hnd, lab = T)
residplot(data2, Pulse ~ NW.Hnd)
residplot(data2, NW.Hnd ~ Pulse)
scatter(data2, Pulse, NW.Hnd, lab = T)
t.test(data1$mpg ~ data1$am, var.equal=TRUE)
t.test(data1$mpg, mu = 0, var.equal=TRUE)
t.test(data1$mpg ~ 0, var.equal=TRUE)
t.test(data1$mpg, 0, var.equal=TRUE)
??t.test
t.test(data1$mpg, var.equal=TRUE)
library(MASS)
library(psych)
library(vannstats)
#----------------------------------------
# load mtcars as new 'data1' object
#----------------------------------------
data1 <- mtcars
#----------------------------------------
# boxplot of 'mpg'
#----------------------------------------
box(data1, mpg)
#----------------------------------------
# boxplot of 'wt'
#----------------------------------------
box(data1, wt)
#----------------------------------------
# boxplot of 'am'
#----------------------------------------
box(data1, am)
#----------------------------------------
# check the multicollinearity assumption by calling a correlation matrix on the regression equation (with all the variables).
#----------------------------------------
cormat(data1, mpg ~ wt + am)
#----------------------------------------
# check the linearity, normality, and homoskedasticity assumption by calling a residuals plot on the regression model
#----------------------------------------
residplot(data1, mpg ~ wt + am)
#----------------------------------------
# run the regression model for predicting values of 'mpg' from the combination of 'wt' and 'am'. Use summary to correctly report results.
#----------------------------------------
summary(lm(mpg ~ wt + am, data=data1))
